@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using CribBlazor.Shared.Cards;
@using CribBlazor.Shared;
@using CribBlazor.Game.Deck;
@using CribBlazor.Shared.Errors;
@using CribBlazor.Client.Components;
@using System.Linq;
@using CribBlazor.Client.Components.FunctionalComponents;
@inject NavigationManager NavigationManager;
@inject CreateFullDeck CreateFullDeck;
@implements IDisposable

<h1>Cards</h1>

<p>
	<button @onclick="Send" disabled="@(!IsConnected)">Send card</button>
	<br />
	<button @onclick="GetDeck">Get deck</button>
</p>

<ul id="cardList">
	@foreach (var card in cards)
	{
		<li>@card</li>
	}
</ul>

<br />

<OptionMatch Option="@Deck">
	<None>
		<div>No deck yet...</div>
	</None>
	<Some Context="deck">
		<ul>
			@foreach (var card in deck.Cards)
			{
				<li>@card.Face - @card.Suit</li>
			}
		</ul>
	</Some>
</OptionMatch>

@code {
	private HubConnection cardHubConnection;
	private HubConnection playingRoundHubConnection;
	private List<string> cards = new List<string>();
	private Guid playerId = Guid.NewGuid();

	// will need multiple HubConnection here

	private Option<CribBlazor.Shared.Deck.Deck> Deck = Option.None<CribBlazor.Shared.Deck.Deck>();

	protected override async Task OnInitializedAsync()
	{
		cardHubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/cardHub"))
			.WithAutomaticReconnect()
			.Build();

		cardHubConnection.On<string, string>("ReceiveCard", (player, json) =>
		{
			var card = Card.FromJson(json);
			cards.Add($"{player}: {card.Face} of {card.Suit}");
			StateHasChanged();
		});

		await cardHubConnection.StartAsync();

		await InitializePlayingRoundHub();
	}

	private async Task InitializePlayingRoundHub()
	{
		playingRoundHubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri(Hubs.PlayingRoundHub))
			.WithAutomaticReconnect()
			.Build();

		playingRoundHubConnection.On<string, string>("CardPlayed", (player, cardJson) =>
		{
			var card = Card.FromJson(cardJson);
		// add card played to game state
		StateHasChanged();
		});

		await playingRoundHubConnection.StartAsync();
	}

	void GetDeck() => CreateFullDeck().Match(deck => Deck = Option.Some(deck), failure => throw failure);

	Task Send() => cardHubConnection.SendAsync("SendCard", playerId, Card.Create(Suits.Clubs, Faces.Ace).SerializeToJson());

	public bool IsConnected => cardHubConnection.State == HubConnectionState.Connected;

	public void Dispose()
	{
		_ = cardHubConnection.DisposeAsync();
		_ = playingRoundHubConnection.DisposeAsync();
	}
}