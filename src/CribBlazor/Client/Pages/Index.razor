@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using CribBlazor.Shared.Cards;
@using CribBlazor.Game.Deck;
@using Functional;
@inject NavigationManager NavigationManager;
@inject CreateFullDeck CreateFullDeck;
@implements IDisposable

<h1>Cards</h1>

<p>
	<button @onclick="Send" disabled="@(!IsConnected)">Send card</button>
	<br />
	<button @onclick="GetDeck">Get deck</button>
</p>

<ul id="cardList">
	@foreach (var card in cards)
	{
		<li>@card</li>
	}
</ul>

<br />

@if (Deck != null)
{
	<ul id="deckList">
		@foreach (var card in Deck.Cards)
		{
			<li>@card.Face - @card.Suit</li>
		}
	</ul>
}

@code {
	private HubConnection hubConnection;
	private List<string> cards = new List<string>();
	private Guid playerId = Guid.NewGuid();
	private CribBlazor.Shared.Deck.Deck Deck;

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(NavigationManager.ToAbsoluteUri("/cardHub"))
			.WithAutomaticReconnect()
			.Build();

		hubConnection.On<string, string>("ReceiveCard", (player, json) =>
		{
			var card = Card.FromJson(json);
			cards.Add($"{player}: {card.Face} of {card.Suit}");
			StateHasChanged();
		});

		await hubConnection.StartAsync();
	}

	void GetDeck() => CreateFullDeck().Match(deck => Deck = deck, failure => throw failure);

	Task Send() => hubConnection.SendAsync("SendCard", playerId, Card.Create(Suits.Clubs, Faces.Ace).SerializeToJson());

	public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

	public void Dispose()
	{
		_ = hubConnection.DisposeAsync();
	}
}