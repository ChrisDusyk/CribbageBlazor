@page "/fetchdata"
@using CribBlazor.Shared
@using CribBlazor.RestClient;
@using CribBlazor.Client.Services;
@using CribBlazor.Shared.Errors;
@using CribBlazor.Client.Components.FunctionalComponents;
@using System.Threading;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<ResultLoader @ref="WeatherLoader" ResultFactory="@(() => FetchWeatherData(CancellationToken.None))">
	<Failure>
		<div>It broke...</div>
	</Failure>
	<Success Context="forecasts">
		<table class="table">
			<thead>
				<tr>
					<th>Date</th>
					<th>Temp. (C)</th>
					<th>Temp. (F)</th>
					<th>Summary</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var forecast in forecasts)
				{
					<tr>
						<td>@forecast.Date.ToShortDateString()</td>
						<td>@forecast.TemperatureC</td>
						<td>@forecast.TemperatureF</td>
						<td>@forecast.Summary</td>
					</tr>
				}
			</tbody>
		</table>
	</Success>
</ResultLoader>

@code {
	[Inject]
	private FetchWeatherData FetchWeatherData { get; set; }

	private ResultLoader<WeatherForecast[], ApplicationError> WeatherLoader { get; set; }
}
